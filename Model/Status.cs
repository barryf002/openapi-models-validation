/*
 * IX-API
 *
 *  This API allows to configure/change/delete Internet Exchange services.  # Filters When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error.  # State A lot of resources are stateful, indicated by the presence of a `state` property, to support the inherently asynchronous nature of provisioning, deployment and on-boarding processes.  The following table describes the meaning of each state:  | State | Meaning | | - -- -- - | - -- -- - | | requested | Resource has been requested by the customer but not yet fully reserved (sub-resources required) | | allocated | All resources required for service are reserved | | testing | The resource is provisioned and is currently being tested | | production | The resource is active and can be used by the customer | | production_change_pending | The resource is active but the customer has requested a change that is awaiting completion | | decommission_requested | The resource is active but the customer has requested disconnection that is awaiting completion | | decommissioned | The resource has been de-provisioned and billing is terminated or scheduled for termination | | archived | The resource was \"deleted/purged\" and is not listed unless explicitly requested in the filter (i.e. `?state=archived`). | | error | The resource has experienced error during provisioning or after is has been activated | | cancelled | The request for a service was cancelled before provisioning was completed | | operator | Human intervention is needed | | scheduled | The service has been scheduled for provisioning |  Please note, that not all implementers _HAVE_ to implement all the listed states.  *Sidenote:* If the deleted operation is applied to an object in state `decommissioned` the object will move to state archived.  # Sensitive Properties  Some properties contain sensitive information and should be redacted when the resource is made available users outside the authorized scope.  This is for example the case when an `Account` is flagged as `discoverable`, it becomes available to other API users. In this case only: `id`, `name` and `metro_area_network_presence` should be exposed.  If a property is `required` and needs to be redacted, a zero value should be used. For strings this would be an empty string `\"\"`, for numeric values `0` and booleans `false`.  Shared resources with sensitive properties: `Account`, `NetworkService` 
 *
 * The version of the OpenAPI document: 2.4.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Status Message
    /// </summary>
    [DataContract(Name = "Status")]
    public partial class Status : IEquatable<Status>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Status() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        /// <param name="attrs">Optional machine readable key value pairs supplementing the message.  A custom, detailed or localized error messagen can be presented to the user, derived from the &#x60;tag&#x60; and &#x60;attrs&#x60;. .</param>
        /// <param name="message">A human readable message, describing the problem and may contain hints for resolution.  (required).</param>
        /// <param name="severity">We are using syslog severity levels: 0 &#x3D; Emergency, 1 &#x3D; Alert, 2 &#x3D; Critical, 3 &#x3D; Error, 4 &#x3D; Warning, 5 &#x3D; Notice, 6 &#x3D; Informational, 7 &#x3D; Debug.  (required).</param>
        /// <param name="tag">A machine readable message identifier.  (required).</param>
        /// <param name="timestamp">The time and date when the event occured. (required).</param>
        public Status(Object attrs = default(Object), string message = default(string), int severity = default(int), string tag = default(string), DateTime timestamp = default(DateTime))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for Status and cannot be null");
            }
            this.Message = message;
            this.Severity = severity;
            // to ensure "tag" is required (not null)
            if (tag == null)
            {
                throw new ArgumentNullException("tag is a required property for Status and cannot be null");
            }
            this.Tag = tag;
            this.Timestamp = timestamp;
            this.Attrs = attrs;
        }

        /// <summary>
        /// Optional machine readable key value pairs supplementing the message.  A custom, detailed or localized error messagen can be presented to the user, derived from the &#x60;tag&#x60; and &#x60;attrs&#x60;. 
        /// </summary>
        /// <value>Optional machine readable key value pairs supplementing the message.  A custom, detailed or localized error messagen can be presented to the user, derived from the &#x60;tag&#x60; and &#x60;attrs&#x60;. </value>
        [DataMember(Name = "attrs", EmitDefaultValue = false)]
        public Object Attrs { get; set; }

        /// <summary>
        /// A human readable message, describing the problem and may contain hints for resolution. 
        /// </summary>
        /// <value>A human readable message, describing the problem and may contain hints for resolution. </value>
        /// <example>&quot;The peer sent an ARP reply for an IP addresses that has not been assigned to them.&quot;</example>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// We are using syslog severity levels: 0 &#x3D; Emergency, 1 &#x3D; Alert, 2 &#x3D; Critical, 3 &#x3D; Error, 4 &#x3D; Warning, 5 &#x3D; Notice, 6 &#x3D; Informational, 7 &#x3D; Debug. 
        /// </summary>
        /// <value>We are using syslog severity levels: 0 &#x3D; Emergency, 1 &#x3D; Alert, 2 &#x3D; Critical, 3 &#x3D; Error, 4 &#x3D; Warning, 5 &#x3D; Notice, 6 &#x3D; Informational, 7 &#x3D; Debug. </value>
        /// <example>2</example>
        [DataMember(Name = "severity", IsRequired = true, EmitDefaultValue = true)]
        public int Severity { get; set; }

        /// <summary>
        /// A machine readable message identifier. 
        /// </summary>
        /// <value>A machine readable message identifier. </value>
        /// <example>&quot;proxy_arp_detected&quot;</example>
        [DataMember(Name = "tag", IsRequired = true, EmitDefaultValue = true)]
        public string Tag { get; set; }

        /// <summary>
        /// The time and date when the event occured.
        /// </summary>
        /// <value>The time and date when the event occured.</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Status {\n");
            sb.Append("  Attrs: ").Append(Attrs).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Status);
        }

        /// <summary>
        /// Returns true if Status instances are equal
        /// </summary>
        /// <param name="input">Instance of Status to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Status input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attrs == input.Attrs ||
                    (this.Attrs != null &&
                    this.Attrs.Equals(input.Attrs))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Severity == input.Severity ||
                    this.Severity.Equals(input.Severity)
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attrs != null)
                {
                    hashCode = (hashCode * 59) + this.Attrs.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Severity.GetHashCode();
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Severity (int) maximum
            if (this.Severity > (int)7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Severity, must be a value less than or equal to 7.", new [] { "Severity" });
            }

            // Severity (int) minimum
            if (this.Severity < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Severity, must be a value greater than or equal to 0.", new [] { "Severity" });
            }

            yield break;
        }
    }

}
