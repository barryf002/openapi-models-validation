/*
 * IX-API
 *
 *  This API allows to configure/change/delete Internet Exchange services.  # Filters When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error.  # State A lot of resources are stateful, indicated by the presence of a `state` property, to support the inherently asynchronous nature of provisioning, deployment and on-boarding processes.  The following table describes the meaning of each state:  | State | Meaning | | - -- -- - | - -- -- - | | requested | Resource has been requested by the customer but not yet fully reserved (sub-resources required) | | allocated | All resources required for service are reserved | | testing | The resource is provisioned and is currently being tested | | production | The resource is active and can be used by the customer | | production_change_pending | The resource is active but the customer has requested a change that is awaiting completion | | decommission_requested | The resource is active but the customer has requested disconnection that is awaiting completion | | decommissioned | The resource has been de-provisioned and billing is terminated or scheduled for termination | | archived | The resource was \"deleted/purged\" and is not listed unless explicitly requested in the filter (i.e. `?state=archived`). | | error | The resource has experienced error during provisioning or after is has been activated | | cancelled | The request for a service was cancelled before provisioning was completed | | operator | Human intervention is needed | | scheduled | The service has been scheduled for provisioning |  Please note, that not all implementers _HAVE_ to implement all the listed states.  *Sidenote:* If the deleted operation is applied to an object in state `decommissioned` the object will move to state archived.  # Sensitive Properties  Some properties contain sensitive information and should be redacted when the resource is made available users outside the authorized scope.  This is for example the case when an `Account` is flagged as `discoverable`, it becomes available to other API users. In this case only: `id`, `name` and `metro_area_network_presence` should be exposed.  If a property is `required` and needs to be redacted, a zero value should be used. For strings this would be an empty string `\"\"`, for numeric values `0` and booleans `false`.  Shared resources with sensitive properties: `Account`, `NetworkService` 
 *
 * The version of the OpenAPI document: 2.4.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A conflict is preventing success
    /// </summary>
    [DataContract(Name = "Conflict")]
    public partial class Conflict : IEquatable<Conflict>, IValidatableObject
    {
        /// <summary>
        /// The type of the conflicting resource. 
        /// </summary>
        /// <value>The type of the conflicting resource. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RemoteResourceTypeEnum
        {
            /// <summary>
            /// Enum Accounts for value: accounts
            /// </summary>
            [EnumMember(Value = "accounts")]
            Accounts = 1,

            /// <summary>
            /// Enum Connections for value: connections
            /// </summary>
            [EnumMember(Value = "connections")]
            Connections = 2,

            /// <summary>
            /// Enum Contacts for value: contacts
            /// </summary>
            [EnumMember(Value = "contacts")]
            Contacts = 3,

            /// <summary>
            /// Enum Devices for value: devices
            /// </summary>
            [EnumMember(Value = "devices")]
            Devices = 4,

            /// <summary>
            /// Enum Facilities for value: facilities
            /// </summary>
            [EnumMember(Value = "facilities")]
            Facilities = 5,

            /// <summary>
            /// Enum Ips for value: ips
            /// </summary>
            [EnumMember(Value = "ips")]
            Ips = 6,

            /// <summary>
            /// Enum Macs for value: macs
            /// </summary>
            [EnumMember(Value = "macs")]
            Macs = 7,

            /// <summary>
            /// Enum MemberJoiningRules for value: member-joining-rules
            /// </summary>
            [EnumMember(Value = "member-joining-rules")]
            MemberJoiningRules = 8,

            /// <summary>
            /// Enum MetroAreaNetwork for value: metro-area-network
            /// </summary>
            [EnumMember(Value = "metro-area-network")]
            MetroAreaNetwork = 9,

            /// <summary>
            /// Enum NetworkFeatureConfigs for value: network-feature-configs
            /// </summary>
            [EnumMember(Value = "network-feature-configs")]
            NetworkFeatureConfigs = 10,

            /// <summary>
            /// Enum NetworkFeatures for value: network-features
            /// </summary>
            [EnumMember(Value = "network-features")]
            NetworkFeatures = 11,

            /// <summary>
            /// Enum NetworkServiceConfigs for value: network-service-configs
            /// </summary>
            [EnumMember(Value = "network-service-configs")]
            NetworkServiceConfigs = 12,

            /// <summary>
            /// Enum NetworkServices for value: network-services
            /// </summary>
            [EnumMember(Value = "network-services")]
            NetworkServices = 13,

            /// <summary>
            /// Enum Pops for value: pops
            /// </summary>
            [EnumMember(Value = "pops")]
            Pops = 14,

            /// <summary>
            /// Enum PortReservations for value: port-reservations
            /// </summary>
            [EnumMember(Value = "port-reservations")]
            PortReservations = 15,

            /// <summary>
            /// Enum Ports for value: ports
            /// </summary>
            [EnumMember(Value = "ports")]
            Ports = 16,

            /// <summary>
            /// Enum ProductOfferings for value: product-offerings
            /// </summary>
            [EnumMember(Value = "product-offerings")]
            ProductOfferings = 17,

            /// <summary>
            /// Enum RoleAssignments for value: role-assignments
            /// </summary>
            [EnumMember(Value = "role-assignments")]
            RoleAssignments = 18,

            /// <summary>
            /// Enum Roles for value: roles
            /// </summary>
            [EnumMember(Value = "roles")]
            Roles = 19

        }


        /// <summary>
        /// The type of the conflicting resource. 
        /// </summary>
        /// <value>The type of the conflicting resource. </value>
        /// <example>&quot;contacts&quot;</example>
        [DataMember(Name = "remote_resource_type", IsRequired = true, EmitDefaultValue = true)]
        public RemoteResourceTypeEnum RemoteResourceType { get; set; }
        /// <summary>
        /// The resource type refers to an ix-api resource. 
        /// </summary>
        /// <value>The resource type refers to an ix-api resource. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            /// <summary>
            /// Enum Accounts for value: accounts
            /// </summary>
            [EnumMember(Value = "accounts")]
            Accounts = 1,

            /// <summary>
            /// Enum Connections for value: connections
            /// </summary>
            [EnumMember(Value = "connections")]
            Connections = 2,

            /// <summary>
            /// Enum Contacts for value: contacts
            /// </summary>
            [EnumMember(Value = "contacts")]
            Contacts = 3,

            /// <summary>
            /// Enum Devices for value: devices
            /// </summary>
            [EnumMember(Value = "devices")]
            Devices = 4,

            /// <summary>
            /// Enum Facilities for value: facilities
            /// </summary>
            [EnumMember(Value = "facilities")]
            Facilities = 5,

            /// <summary>
            /// Enum Ips for value: ips
            /// </summary>
            [EnumMember(Value = "ips")]
            Ips = 6,

            /// <summary>
            /// Enum Macs for value: macs
            /// </summary>
            [EnumMember(Value = "macs")]
            Macs = 7,

            /// <summary>
            /// Enum MemberJoiningRules for value: member-joining-rules
            /// </summary>
            [EnumMember(Value = "member-joining-rules")]
            MemberJoiningRules = 8,

            /// <summary>
            /// Enum MetroAreaNetwork for value: metro-area-network
            /// </summary>
            [EnumMember(Value = "metro-area-network")]
            MetroAreaNetwork = 9,

            /// <summary>
            /// Enum NetworkFeatureConfigs for value: network-feature-configs
            /// </summary>
            [EnumMember(Value = "network-feature-configs")]
            NetworkFeatureConfigs = 10,

            /// <summary>
            /// Enum NetworkFeatures for value: network-features
            /// </summary>
            [EnumMember(Value = "network-features")]
            NetworkFeatures = 11,

            /// <summary>
            /// Enum NetworkServiceConfigs for value: network-service-configs
            /// </summary>
            [EnumMember(Value = "network-service-configs")]
            NetworkServiceConfigs = 12,

            /// <summary>
            /// Enum NetworkServices for value: network-services
            /// </summary>
            [EnumMember(Value = "network-services")]
            NetworkServices = 13,

            /// <summary>
            /// Enum Pops for value: pops
            /// </summary>
            [EnumMember(Value = "pops")]
            Pops = 14,

            /// <summary>
            /// Enum PortReservations for value: port-reservations
            /// </summary>
            [EnumMember(Value = "port-reservations")]
            PortReservations = 15,

            /// <summary>
            /// Enum Ports for value: ports
            /// </summary>
            [EnumMember(Value = "ports")]
            Ports = 16,

            /// <summary>
            /// Enum ProductOfferings for value: product-offerings
            /// </summary>
            [EnumMember(Value = "product-offerings")]
            ProductOfferings = 17,

            /// <summary>
            /// Enum RoleAssignments for value: role-assignments
            /// </summary>
            [EnumMember(Value = "role-assignments")]
            RoleAssignments = 18,

            /// <summary>
            /// Enum Roles for value: roles
            /// </summary>
            [EnumMember(Value = "roles")]
            Roles = 19

        }


        /// <summary>
        /// The resource type refers to an ix-api resource. 
        /// </summary>
        /// <value>The resource type refers to an ix-api resource. </value>
        /// <example>&quot;role-assignments&quot;</example>
        [DataMember(Name = "resource_type", IsRequired = true, EmitDefaultValue = true)]
        public ResourceTypeEnum ResourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Conflict" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Conflict() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Conflict" /> class.
        /// </summary>
        /// <param name="remoteResourceId">The id of the conflicting resource. This is in most cases the id of the current resource.  (required).</param>
        /// <param name="remoteResourceType">The type of the conflicting resource.  (required).</param>
        /// <param name="resourceId">The id of the resource which has a conflict with the request operation on the current resource.  (required).</param>
        /// <param name="resourceProperty">Indicates the property where the resource is in use.  (required).</param>
        /// <param name="resourceType">The resource type refers to an ix-api resource.  (required).</param>
        public Conflict(string remoteResourceId = default(string), RemoteResourceTypeEnum remoteResourceType = default(RemoteResourceTypeEnum), string resourceId = default(string), string resourceProperty = default(string), ResourceTypeEnum resourceType = default(ResourceTypeEnum))
        {
            // to ensure "remoteResourceId" is required (not null)
            if (remoteResourceId == null)
            {
                throw new ArgumentNullException("remoteResourceId is a required property for Conflict and cannot be null");
            }
            this.RemoteResourceId = remoteResourceId;
            this.RemoteResourceType = remoteResourceType;
            // to ensure "resourceId" is required (not null)
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId is a required property for Conflict and cannot be null");
            }
            this.ResourceId = resourceId;
            // to ensure "resourceProperty" is required (not null)
            if (resourceProperty == null)
            {
                throw new ArgumentNullException("resourceProperty is a required property for Conflict and cannot be null");
            }
            this.ResourceProperty = resourceProperty;
            this.ResourceType = resourceType;
        }

        /// <summary>
        /// The id of the conflicting resource. This is in most cases the id of the current resource. 
        /// </summary>
        /// <value>The id of the conflicting resource. This is in most cases the id of the current resource. </value>
        /// <example>&quot;C:523589&quot;</example>
        [DataMember(Name = "remote_resource_id", IsRequired = true, EmitDefaultValue = true)]
        public string RemoteResourceId { get; set; }

        /// <summary>
        /// The id of the resource which has a conflict with the request operation on the current resource. 
        /// </summary>
        /// <value>The id of the resource which has a conflict with the request operation on the current resource. </value>
        /// <example>&quot;RA:2819238&quot;</example>
        [DataMember(Name = "resource_id", IsRequired = true, EmitDefaultValue = true)]
        public string ResourceId { get; set; }

        /// <summary>
        /// Indicates the property where the resource is in use. 
        /// </summary>
        /// <value>Indicates the property where the resource is in use. </value>
        /// <example>&quot;contact&quot;</example>
        [DataMember(Name = "resource_property", IsRequired = true, EmitDefaultValue = true)]
        public string ResourceProperty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Conflict {\n");
            sb.Append("  RemoteResourceId: ").Append(RemoteResourceId).Append("\n");
            sb.Append("  RemoteResourceType: ").Append(RemoteResourceType).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceProperty: ").Append(ResourceProperty).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Conflict);
        }

        /// <summary>
        /// Returns true if Conflict instances are equal
        /// </summary>
        /// <param name="input">Instance of Conflict to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Conflict input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RemoteResourceId == input.RemoteResourceId ||
                    (this.RemoteResourceId != null &&
                    this.RemoteResourceId.Equals(input.RemoteResourceId))
                ) && 
                (
                    this.RemoteResourceType == input.RemoteResourceType ||
                    this.RemoteResourceType.Equals(input.RemoteResourceType)
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.ResourceProperty == input.ResourceProperty ||
                    (this.ResourceProperty != null &&
                    this.ResourceProperty.Equals(input.ResourceProperty))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    this.ResourceType.Equals(input.ResourceType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RemoteResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.RemoteResourceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RemoteResourceType.GetHashCode();
                if (this.ResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceId.GetHashCode();
                }
                if (this.ResourceProperty != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceProperty.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResourceType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
