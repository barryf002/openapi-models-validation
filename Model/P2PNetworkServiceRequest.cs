/*
 * IX-API
 *
 *  This API allows to configure/change/delete Internet Exchange services.  # Filters When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error.  # State A lot of resources are stateful, indicated by the presence of a `state` property, to support the inherently asynchronous nature of provisioning, deployment and on-boarding processes.  The following table describes the meaning of each state:  | State | Meaning | | - -- -- - | - -- -- - | | requested | Resource has been requested by the customer but not yet fully reserved (sub-resources required) | | allocated | All resources required for service are reserved | | testing | The resource is provisioned and is currently being tested | | production | The resource is active and can be used by the customer | | production_change_pending | The resource is active but the customer has requested a change that is awaiting completion | | decommission_requested | The resource is active but the customer has requested disconnection that is awaiting completion | | decommissioned | The resource has been de-provisioned and billing is terminated or scheduled for termination | | archived | The resource was \"deleted/purged\" and is not listed unless explicitly requested in the filter (i.e. `?state=archived`). | | error | The resource has experienced error during provisioning or after is has been activated | | cancelled | The request for a service was cancelled before provisioning was completed | | operator | Human intervention is needed | | scheduled | The service has been scheduled for provisioning |  Please note, that not all implementers _HAVE_ to implement all the listed states.  *Sidenote:* If the deleted operation is applied to an object in state `decommissioned` the object will move to state archived.  # Sensitive Properties  Some properties contain sensitive information and should be redacted when the resource is made available users outside the authorized scope.  This is for example the case when an `Account` is flagged as `discoverable`, it becomes available to other API users. In this case only: `id`, `name` and `metro_area_network_presence` should be exposed.  If a property is `required` and needs to be redacted, a zero value should be used. For strings this would be an empty string `\"\"`, for numeric values `0` and booleans `false`.  Shared resources with sensitive properties: `Account`, `NetworkService` 
 *
 * The version of the OpenAPI document: 2.4.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// P2P Network Service Request
    /// </summary>
    [DataContract(Name = "P2PNetworkServiceRequest")]
    public partial class P2PNetworkServiceRequest : NetworkServiceRequest, IEquatable<P2PNetworkServiceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="P2PNetworkServiceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected P2PNetworkServiceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="P2PNetworkServiceRequest" /> class.
        /// </summary>
        /// <param name="billingAccount">An account requires billing_information to be used as a &#x60;billing_account&#x60;. *(Sensitive Property)* (required).</param>
        /// <param name="consumingAccount">The &#x60;id&#x60; of the account consuming a service.  Used to be &#x60;owning_customer&#x60;.  (required).</param>
        /// <param name="contractRef">A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. *(Sensitive Property)* .</param>
        /// <param name="displayName">Name of the point to point virtual circuit.  It is visible to all parties allowed to connect to this virtual circuit.  It is intended for humans to make sense of. .</param>
        /// <param name="externalRef">Reference field, free to use for the API user. *(Sensitive Property)* .</param>
        /// <param name="managingAccount">The &#x60;id&#x60; of the account responsible for managing the service via the API. A manager can read and update the state of entities.  (required).</param>
        /// <param name="purchaseOrder">Purchase Order ID which will be displayed on the invoice. *(Sensitive Property)*  (default to &quot;&quot;).</param>
        /// <param name="type">type (default to &quot;P2PNetworkServiceRequest&quot;).</param>
        public P2PNetworkServiceRequest(string billingAccount = default(string), string consumingAccount = default(string), string contractRef = default(string), string displayName = default(string), string externalRef = default(string), string managingAccount = default(string), string purchaseOrder = @"", string type = @"P2PNetworkServiceRequest") : base(type)
        {
            // to ensure "billingAccount" is required (not null)
            if (billingAccount == null)
            {
                throw new ArgumentNullException("billingAccount is a required property for P2PNetworkServiceRequest and cannot be null");
            }
            this.BillingAccount = billingAccount;
            // to ensure "consumingAccount" is required (not null)
            if (consumingAccount == null)
            {
                throw new ArgumentNullException("consumingAccount is a required property for P2PNetworkServiceRequest and cannot be null");
            }
            this.ConsumingAccount = consumingAccount;
            // to ensure "managingAccount" is required (not null)
            if (managingAccount == null)
            {
                throw new ArgumentNullException("managingAccount is a required property for P2PNetworkServiceRequest and cannot be null");
            }
            this.ManagingAccount = managingAccount;
            this.ContractRef = contractRef;
            this.DisplayName = displayName;
            this.ExternalRef = externalRef;
            // use default value if no "purchaseOrder" provided
            this.PurchaseOrder = purchaseOrder ?? @"";
        }

        /// <summary>
        /// An account requires billing_information to be used as a &#x60;billing_account&#x60;. *(Sensitive Property)*
        /// </summary>
        /// <value>An account requires billing_information to be used as a &#x60;billing_account&#x60;. *(Sensitive Property)*</value>
        [DataMember(Name = "billing_account", IsRequired = true, EmitDefaultValue = true)]
        public string BillingAccount { get; set; }

        /// <summary>
        /// The &#x60;id&#x60; of the account consuming a service.  Used to be &#x60;owning_customer&#x60;. 
        /// </summary>
        /// <value>The &#x60;id&#x60; of the account consuming a service.  Used to be &#x60;owning_customer&#x60;. </value>
        /// <example>&quot;2381982&quot;</example>
        [DataMember(Name = "consuming_account", IsRequired = true, EmitDefaultValue = true)]
        public string ConsumingAccount { get; set; }

        /// <summary>
        /// A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. *(Sensitive Property)* 
        /// </summary>
        /// <value>A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. *(Sensitive Property)* </value>
        /// <example>&quot;contract:31824&quot;</example>
        [DataMember(Name = "contract_ref", EmitDefaultValue = true)]
        public string ContractRef { get; set; }

        /// <summary>
        /// Name of the point to point virtual circuit.  It is visible to all parties allowed to connect to this virtual circuit.  It is intended for humans to make sense of. 
        /// </summary>
        /// <value>Name of the point to point virtual circuit.  It is visible to all parties allowed to connect to this virtual circuit.  It is intended for humans to make sense of. </value>
        /// <example>&quot;E-Line Customer&quot;</example>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Reference field, free to use for the API user. *(Sensitive Property)* 
        /// </summary>
        /// <value>Reference field, free to use for the API user. *(Sensitive Property)* </value>
        /// <example>&quot;IX:Service:23042&quot;</example>
        [DataMember(Name = "external_ref", EmitDefaultValue = true)]
        public string ExternalRef { get; set; }

        /// <summary>
        /// The &#x60;id&#x60; of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
        /// </summary>
        /// <value>The &#x60;id&#x60; of the account responsible for managing the service via the API. A manager can read and update the state of entities. </value>
        /// <example>&quot;238189294&quot;</example>
        [DataMember(Name = "managing_account", IsRequired = true, EmitDefaultValue = true)]
        public string ManagingAccount { get; set; }

        /// <summary>
        /// Purchase Order ID which will be displayed on the invoice. *(Sensitive Property)* 
        /// </summary>
        /// <value>Purchase Order ID which will be displayed on the invoice. *(Sensitive Property)* </value>
        /// <example>&quot;Project: DC Moon&quot;</example>
        [DataMember(Name = "purchase_order", EmitDefaultValue = false)]
        public string PurchaseOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class P2PNetworkServiceRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BillingAccount: ").Append(BillingAccount).Append("\n");
            sb.Append("  ConsumingAccount: ").Append(ConsumingAccount).Append("\n");
            sb.Append("  ContractRef: ").Append(ContractRef).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ExternalRef: ").Append(ExternalRef).Append("\n");
            sb.Append("  ManagingAccount: ").Append(ManagingAccount).Append("\n");
            sb.Append("  PurchaseOrder: ").Append(PurchaseOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as P2PNetworkServiceRequest);
        }

        /// <summary>
        /// Returns true if P2PNetworkServiceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of P2PNetworkServiceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(P2PNetworkServiceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.BillingAccount == input.BillingAccount ||
                    (this.BillingAccount != null &&
                    this.BillingAccount.Equals(input.BillingAccount))
                ) && base.Equals(input) && 
                (
                    this.ConsumingAccount == input.ConsumingAccount ||
                    (this.ConsumingAccount != null &&
                    this.ConsumingAccount.Equals(input.ConsumingAccount))
                ) && base.Equals(input) && 
                (
                    this.ContractRef == input.ContractRef ||
                    (this.ContractRef != null &&
                    this.ContractRef.Equals(input.ContractRef))
                ) && base.Equals(input) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && base.Equals(input) && 
                (
                    this.ExternalRef == input.ExternalRef ||
                    (this.ExternalRef != null &&
                    this.ExternalRef.Equals(input.ExternalRef))
                ) && base.Equals(input) && 
                (
                    this.ManagingAccount == input.ManagingAccount ||
                    (this.ManagingAccount != null &&
                    this.ManagingAccount.Equals(input.ManagingAccount))
                ) && base.Equals(input) && 
                (
                    this.PurchaseOrder == input.PurchaseOrder ||
                    (this.PurchaseOrder != null &&
                    this.PurchaseOrder.Equals(input.PurchaseOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BillingAccount != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAccount.GetHashCode();
                }
                if (this.ConsumingAccount != null)
                {
                    hashCode = (hashCode * 59) + this.ConsumingAccount.GetHashCode();
                }
                if (this.ContractRef != null)
                {
                    hashCode = (hashCode * 59) + this.ContractRef.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.ExternalRef != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalRef.GetHashCode();
                }
                if (this.ManagingAccount != null)
                {
                    hashCode = (hashCode * 59) + this.ManagingAccount.GetHashCode();
                }
                if (this.PurchaseOrder != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseOrder.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // ContractRef (string) maxLength
            if (this.ContractRef != null && this.ContractRef.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContractRef, length must be less than 128.", new [] { "ContractRef" });
            }

            // ExternalRef (string) maxLength
            if (this.ExternalRef != null && this.ExternalRef.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalRef, length must be less than 128.", new [] { "ExternalRef" });
            }

            // PurchaseOrder (string) maxLength
            if (this.PurchaseOrder != null && this.PurchaseOrder.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseOrder, length must be less than 80.", new [] { "PurchaseOrder" });
            }

            yield break;
        }
    }

}
